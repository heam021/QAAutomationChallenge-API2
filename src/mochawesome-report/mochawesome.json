{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-04T21:37:00.975Z",
    "end": "2024-05-04T21:37:01.075Z",
    "duration": 100,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a640eb9b-389f-45db-9cc5-25783cabf812",
      "title": "",
      "fullFile": "/Users/hectoramaya/Documents/API Test 2/src/test/PokeAPI.spec.js",
      "file": "/test/PokeAPI.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eee1c767-5843-4e53-a9f7-818f25e97837",
          "title": "PokeAPI",
          "fullFile": "/Users/hectoramaya/Documents/API Test 2/src/test/PokeAPI.spec.js",
          "file": "/test/PokeAPI.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of all Poke Berries",
              "fullTitle": "PokeAPI should retrieve a list of all Poke Berries",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const berries = await pokeAPI.getAllBerries();\n// Verify that at least one berry has been found.\nassert.ok(berries.length > 0, 'No se encontraron berries');\nconsole.log('Number of berries found:', berries.length);\n// Print the berry arrangement\nconsole.log('Array of berrys:', berries);\nconsole.log(\"=======================\");\n// Print the name and URL of each berry\nberries.forEach((berry, index) => {\n    console.log(`Berry ${index + 1}: Name - ${berry.name}, URL - ${berry.url}`);\n});\n// Generate POJO scheme from a berry\nconst berrySchema = new PokeBerry('string', 'string');\n// Validate each berry against the POJO scheme\nberries.forEach((berry, index) => {\n    assert.strictEqual(typeof berry.name, typeof berrySchema.name, `Berry name data type ${index + 1} not match`);\n    assert.strictEqual(typeof berry.url, typeof berrySchema.url, `Berry URL data type ${index + 1} not match`);\n});",
              "err": {},
              "uuid": "8076e847-ad45-465a-88f5-4a002e46d98b",
              "parentUUID": "eee1c767-5843-4e53-a9f7-818f25e97837",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8076e847-ad45-465a-88f5-4a002e46d98b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}